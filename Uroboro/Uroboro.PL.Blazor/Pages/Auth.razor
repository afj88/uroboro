@page "/auth"
@using Microsoft.Extensions.Configuration
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using Uroboro.Common.Models
@inject HttpClient Http
@inject IConfiguration Configuration

<h3>Auth</h3>

<EditForm Model="@authData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Username:
            <InputText @bind-Value="authData.Username" />
        </label>
    </p>
    <p>
        <label>
            Password:
            <InputText type="password" @bind-Value="authData.Password" />
        </label>
    </p>
    <button type="submit">Submit</button>
</EditForm>

<span>@authResponse</span>

<table style="max-width: 66%;">
    <tr>
        <td>Token:</td>
        <td style="overflow-wrap: break-word;">@token</td>
    </tr>
    <tr>
        <td>Received at:</td>
        <td>@tokenReceivedAt</td>
    </tr>
    <tr>
        <td></td>
        <td><button @onclick="@RemoveToken">Remove Token</button></td>
    </tr>
</table>

<h3>Secure APIs</h3>

<button @onclick="SecureGet">GET</button>
<button @onclick="SecurePost">POST</button>

@code {
    private AuthData authData = new AuthData();
    private string token = null;
    private DateTime tokenReceivedAt = DateTime.Now;
    private string authResponse = null;

    private async void HandleValidSubmit()
    {
        using var response = await Http.PostAsJsonAsync($"{Configuration["WebApiUri"]}Token/GetToken", authData);

        if (!response.IsSuccessStatusCode)
        {
            this.authResponse = response.StatusCode.ToString();
            this.token = null;
            StateHasChanged();
            return;
        }

        try
        {
            var responseContent = await response.Content.ReadFromJsonAsync<JwtAuthResponse>();
            this.authResponse = response.StatusCode.ToString();
            this.token = responseContent.Token;
            this.tokenReceivedAt = DateTime.Now;
        }
        catch (NotSupportedException ex)
        {
            this.authResponse = $"The content type is not supported: {ex.StackTrace}";
        }
        catch (JsonException ex)
        {
            this.authResponse = $"Invalid JSON: {ex.StackTrace}";
        }
        StateHasChanged();
    }

    private void RemoveToken()
    {
        this.token = null;
    }

    private async void SecureGet()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("GET"),
            RequestUri = new Uri($"{Configuration["WebApiUri"]}Secure")
        };

        requestMessage.Headers.Authorization =
            new AuthenticationHeaderValue("Bearer", this.token);

        requestMessage.Headers.TryAddWithoutValidation(
            "x-custom-header", "value");

        try
        {
            var response = await Http.SendAsync(requestMessage);
            var responseStatusCode = response.StatusCode;

            var responseBody = await response.Content.ReadAsStringAsync();
            this.authResponse = responseStatusCode == System.Net.HttpStatusCode.OK ? responseBody : responseStatusCode.ToString();
            StateHasChanged();
        }
        catch(Exception ex)
        {
            this.authResponse = $"An error occurred: {ex.StackTrace}";
        }
    }

    private async void SecurePost()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri($"{Configuration["WebApiUri"]}Secure")
        };

        requestMessage.Headers.Authorization =
            new AuthenticationHeaderValue("Bearer", this.token);

        requestMessage.Headers.TryAddWithoutValidation(
            "x-custom-header", "value");

        try
        {
            var response = await Http.SendAsync(requestMessage);
            var responseStatusCode = response.StatusCode;

            var responseBody = await response.Content.ReadAsStringAsync();
            this.authResponse = responseStatusCode == System.Net.HttpStatusCode.OK ? responseBody : responseStatusCode.ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            this.authResponse = $"An error occurred: {ex.StackTrace}";
        }
    }
}
