@page "/signalr"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Configuration
@using Uroboro.Common.Models; 
@inject IConfiguration Configuration

<h3>SignalR</h3>

<button @onclick="BtnSendMessageWithoutParameters">Send without params</button>
<button @onclick="BtnSendMessageWithParameters">Send with params</button>
<button @onclick="BtnReceiveParameters">Receive params</button>

@if (messages.Count > 0)
{
    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration["SignalRUri"]}SampleHub")
            .Build();

        hubConnection.On("GetServerMessage", (string message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        hubConnection.On("GetServerMessageWithParams", (bool p1, TodoItem item) =>
        {
            messages.Add($"Item = [{item.ToString()}], Received = [{p1}]");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async void BtnSendMessageWithoutParameters()
    {
        if (IsConnected)
        {
            await SendMessage();
        }
    }

    private async void BtnSendMessageWithParameters()
    {
        if (IsConnected)
        {
            await SendMessageWithParam();
        }
    }

    private async void BtnReceiveParameters()
    {
        if (IsConnected)
        {
            await SendMessageWithParamInResponse();
        }
    }

    //private void CallLoadData()
    //{
    //    Task.Run(async () =>
    //    {
    //        await LoadData();
    //    });
    //}

    Task SendMessageWithParam() => hubConnection.SendAsync("GetClientMessageWithParam", "Blazor");
    Task SendMessageWithParamInResponse() => hubConnection.SendAsync("SendParamsToClient", "Blazor");

    protected async Task SendMessage()
    {
        await hubConnection.SendAsync("GetClientMessage");
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}  